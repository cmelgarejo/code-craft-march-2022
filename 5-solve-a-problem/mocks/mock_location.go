// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cmelgarejo/code-craft-march-2022/5-solve-a-problem/location (interfaces: DistanceCalculator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDistanceCalculator is a mock of DistanceCalculator interface.
type MockDistanceCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockDistanceCalculatorMockRecorder
}

// MockDistanceCalculatorMockRecorder is the mock recorder for MockDistanceCalculator.
type MockDistanceCalculatorMockRecorder struct {
	mock *MockDistanceCalculator
}

// NewMockDistanceCalculator creates a new mock instance.
func NewMockDistanceCalculator(ctrl *gomock.Controller) *MockDistanceCalculator {
	mock := &MockDistanceCalculator{ctrl: ctrl}
	mock.recorder = &MockDistanceCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistanceCalculator) EXPECT() *MockDistanceCalculatorMockRecorder {
	return m.recorder
}

// GetDistance mocks base method.
func (m *MockDistanceCalculator) GetDistance(arg0, arg1, arg2, arg3 float64) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDistance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetDistance indicates an expected call of GetDistance.
func (mr *MockDistanceCalculatorMockRecorder) GetDistance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDistance", reflect.TypeOf((*MockDistanceCalculator)(nil).GetDistance), arg0, arg1, arg2, arg3)
}
